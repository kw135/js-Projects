/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ (() => {

eval("var ImgTile = /** @class */ (function () {\n    function ImgTile(id, x, y) {\n        var _this = this;\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.element = document.createElement(\"canvas\");\n        this.element.className = \"square\";\n        this.element.style.backgroundPositionX = -x * 48 - 1 + \"px\";\n        this.element.style.backgroundPositionY = -y * 48 - 1 + \"px\";\n        this.element.setAttribute(\"id\", \"item\".concat(id));\n        this.element.onclick = function () { return _this.handleClick(); };\n    }\n    ImgTile.prototype.handleClick = function () {\n        var _this = this;\n        console.log(app.selectedTiles, app.previouslySelected, \"item\");\n        var checked = document.getElementById(\"auto\");\n        var isChecked = checked.checked;\n        if (app.selectedTiles.length !== 0) {\n            app.previouslySelected.forEach(function (id) {\n                var prevTile = document.getElementById(id.toString());\n                if (prevTile) {\n                    prevTile.className = \"tile\";\n                }\n            });\n            var nextId_1 = Math.max.apply(Math, app.selectedTiles) + 1;\n            app.previouslySelected = app.selectedTiles;\n            app.selectedTiles.forEach(function (id) {\n                var tile = document.getElementById(id.toString());\n                if (tile) {\n                    tile.className = \"tile selected\";\n                    tile.style.backgroundImage = \"url('../img/sprites.png')\";\n                    tile.style.backgroundPosition = _this.element.style.backgroundPosition;\n                    if (!app.isControlHeld) {\n                        app.selectedTiles = [];\n                    }\n                    if (isChecked) {\n                        app.selectedTiles.push(nextId_1);\n                    }\n                    else {\n                        tile.className = \"tile\";\n                    }\n                }\n            });\n        }\n    };\n    return ImgTile;\n}());\nvar MapTile = /** @class */ (function () {\n    function MapTile(id, x, y) {\n        var _this = this;\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.element = document.createElement(\"canvas\");\n        this.element.className = \"tile\";\n        this.position = this.element.getBoundingClientRect();\n        this.element.setAttribute(\"id\", id.toString());\n        this.element.onclick = function () { return _this.handleClick(); };\n    }\n    MapTile.prototype.handleClick = function () {\n        app.selectedTiles.sort();\n        console.log(app.selectedTiles, app.previouslySelected);\n        console.log(this.position);\n        if (!app.isControlHeld) {\n            app.previouslySelected = app.selectedTiles;\n            app.selectedTiles = [];\n        }\n        if (app.selectedTiles.includes(this.id)) {\n            app.selectedTiles.splice(app.selectedTiles.indexOf(this.id), 1);\n            this.element.className = \"tile\";\n        }\n        else {\n            this.element.className = \"tile selected\";\n            app.selectedTiles.push(this.id);\n        }\n        app.previouslySelected.forEach(function (id) {\n            var prevTile = document.getElementById(id.toString());\n            if (prevTile) {\n                prevTile.className = \"tile\";\n            }\n        });\n        this.setupKeyListeners();\n    };\n    MapTile.prototype.updatePosition = function () {\n        this.position = this.element.getBoundingClientRect();\n    };\n    MapTile.prototype.setupKeyListeners = function () {\n        window.addEventListener(\"keydown\", function (e) {\n            if (app.selectedTiles.length !== 0) {\n                switch (e.key) {\n                    case \"Delete\":\n                        app.selectedTiles.forEach(function (id) {\n                            var tile = document.getElementById(id.toString());\n                            if (tile) {\n                                tile.className = \"tile\";\n                                tile.style.backgroundImage = \"\";\n                                tile.style.backgroundPosition = \"\";\n                            }\n                        });\n                        app.selectedTiles = [];\n                        break;\n                    case \"Meta\":\n                    case \"Control\":\n                        app.isControlHeld = true;\n                        break;\n                    default:\n                        break;\n                }\n            }\n        });\n        window.addEventListener(\"keyup\", function (e) {\n            switch (e.key) {\n                case \"Meta\":\n                case \"Control\":\n                    app.isControlHeld = false;\n                    break;\n                default:\n                    break;\n            }\n        });\n    };\n    return MapTile;\n}());\nvar app = {\n    sizeX: 16,\n    sizeY: 20,\n    sizeY2: 20,\n    sizeX2: 29,\n    selectedTiles: [],\n    previouslySelected: [],\n    isControlHeld: false,\n    mapTiles: []\n};\nwindow.addEventListener(\"load\", function () {\n    var itemsCanvas = document.getElementById(\"itemsCanvas\");\n    var count = 0;\n    for (var y = 0; y < app.sizeY; y++) {\n        for (var x = 0; x < app.sizeX; x++) {\n            var imgTile = new ImgTile(count, x, y);\n            itemsCanvas === null || itemsCanvas === void 0 ? void 0 : itemsCanvas.appendChild(imgTile.element);\n            count++;\n        }\n    }\n    var mainCanvas = document.getElementById(\"mainCanvas\");\n    count = 0;\n    for (var y = 0; y < app.sizeY2; y++) {\n        for (var x = 0; x < app.sizeX2; x++) {\n            var mapTile = new MapTile(count, x, y);\n            app.mapTiles.push(mapTile);\n            mainCanvas === null || mainCanvas === void 0 ? void 0 : mainCanvas.appendChild(mapTile.element);\n            mapTile.updatePosition();\n            count++;\n        }\n    }\n    mainCanvas === null || mainCanvas === void 0 ? void 0 : mainCanvas.addEventListener(\"mousedown\", function (f) {\n        var startingPoint = { x: f.pageX, y: f.pageY };\n        var handleMouseMove = function (e) {\n            var div = document.createElement(\"div\");\n            div.setAttribute(\"id\", \"yellow\");\n            var divs = document.querySelectorAll(\"#yellow\");\n            div.style.backgroundColor = \"rgba(255,255,0,0.5)\";\n            div.style.position = \"absolute\";\n            if (e.pageX - startingPoint.x > 0) {\n                div.style.left = startingPoint.x + \"px\";\n                div.style.width = e.pageX - startingPoint.x + \"px\";\n            }\n            else {\n                div.style.left = e.pageX + \"px\";\n                div.style.width = startingPoint.x - e.pageX + \"px\";\n            }\n            if (e.pageY - startingPoint.y > 0) {\n                div.style.top = startingPoint.y + \"px\";\n                div.style.height = e.pageY - startingPoint.y + \"px\";\n            }\n            else {\n                div.style.top = e.pageY + \"px\";\n                div.style.height = startingPoint.y - e.pageY + \"px\";\n            }\n            mainCanvas.append(div);\n            var position = div.getBoundingClientRect();\n            app.mapTiles.forEach(function (tile) {\n                if (tile.position.left < position.right &&\n                    tile.position.right > position.left &&\n                    tile.position.top < position.bottom &&\n                    tile.position.bottom > position.top) {\n                    // Only select if not already selected\n                    if (!app.selectedTiles.includes(tile.id)) {\n                        tile.element.className = \"tile selected\";\n                        app.selectedTiles.push(tile.id);\n                    }\n                }\n                else if (!app.isControlHeld) {\n                    // Deselect if not in selection area (unless control is held)\n                    var index = app.selectedTiles.indexOf(tile.id);\n                    if (index > -1) {\n                        app.selectedTiles.splice(index, 1);\n                        tile.element.className = \"tile\";\n                    }\n                }\n            });\n            divs.forEach(function (el) { return el.remove(); });\n        };\n        var cleanup = function () {\n            var div = document.getElementById(\"yellow\");\n            if (div && !app.isControlHeld) {\n                div.remove();\n            }\n            mainCanvas.removeEventListener(\"mousemove\", handleMouseMove);\n        };\n        mainCanvas.addEventListener(\"mousemove\", handleMouseMove);\n        mainCanvas.addEventListener(\"mouseleave\", cleanup);\n        mainCanvas.addEventListener(\"mouseup\", cleanup);\n    });\n});\n\n\n//# sourceURL=webpack://map-generator/./src/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/main.js"]();
/******/ 	
/******/ })()
;